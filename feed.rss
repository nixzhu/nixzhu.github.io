<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>NIX ZHU</title><description>I'm NIX. An app developer.</description><link>https://nixzhu.dev</link><language>en</language><lastBuildDate>Mon, 2 May 2022 14:07:19 +0800</lastBuildDate><pubDate>Mon, 2 May 2022 14:07:19 +0800</pubDate><ttl>250</ttl><atom:link href="https://nixzhu.dev/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://nixzhu.dev/notes/resolve-package-dependencies-in-terminal</guid><title>在终端里解决 Swift 包依赖</title><description>Xcode 不走系统代理，若遇到 Swift Package 拉取失败，可通过命令行解决</description><link>https://nixzhu.dev/notes/resolve-package-dependencies-in-terminal</link><pubDate>Tue, 21 Dec 2021 09:41:00 +0800</pubDate><content:encoded><![CDATA[<h1>在终端里解决 Swift 包依赖</h1><p>因为沦陷区的互联网受限，Xcode 可能无法正常拉取来自 GitHub 的 Swift Package。由于 Xcode 不走系统代理，我们只能使用命令行解决：</p><ol><li>关闭 Xcode</li></ol><ol start="2"><li>终端启用代理（此处使用 ClashX 提供的命令，请根据你的情况调整）</li></ol><p><code>export https_proxy=http://127.0.0.1:7890 http_proxy=http://127.0.0.1:7890 all_proxy=socks5://127.0.0.1:7890</code></p><ol start="3"><li>进入 Xcode 工程所在目录，然后使用系统的源码管理工具解决包依赖（如此代理才能干预）</li></ol><p><code>xcodebuild -resolvePackageDependencies -scmProvider system</code></p><ol start="4"><li>再打开对应的 Xcode 工程</li></ol><p>此方法可处理普通的 Xcode 工程，也可以处理单纯的 Swift Package 的依赖</p>]]></content:encoded></item><item><guid isPermaLink="true">https://nixzhu.dev/notes/new-apple-distrubution-certificate</guid><title>新的 Apple 分发证书</title><description>新 Mac 需要通过新证书生成新的分发证书，以提交 App 到 App Store</description><link>https://nixzhu.dev/notes/new-apple-distrubution-certificate</link><pubDate>Sat, 31 Jul 2021 09:41:00 +0800</pubDate><content:encoded><![CDATA[<h1>新的 Apple 分发证书</h1><p>如果你的新 Mac 遇到无法提交 App 到 App Store 的问题（<a href="https://daddycoding.com/2020/07/22/missing-private-key/">Missing Private Key</a>）</p><ol><li>打开<strong>钥匙串访问</strong>，菜单选择<strong>证书助理</strong> -&gt; <strong>从证书颁发机构请求证书…</strong></li><li>填入常用电子邮件和昵称，存储到磁盘，得到 <strong>CertificateSigningRequest.certSigningRequest</strong></li><li>到<a href="https://developer.apple.com/account/resources/certificates/add">这里</a>去 <strong>Create a New Certificate</strong><ol><li>选择 Apple Distrubution，Continue</li><li>Choose File，将之前得到的 CertificateSigningRequest.certSigningRequest 上传，Continue</li><li>下载证书，双击之，重启 Xcode 即可</li></ol></li></ol><p>如果还提示 Mac Installer 有问题，就在网页 certificates 一栏里删除旧的。到 Xcode 的账号管理的 Manage Certificates 里确定旧的已删除，然后重启 Xcode。再次上传 Mac app 时会提示生成新的 p12 证书</p>]]></content:encoded></item><item><guid isPermaLink="true">https://nixzhu.dev/posts/introducing-ducky</guid><title>Introducing Ducky</title><description>Ducky is a document-based app that helps you infer models from JSON to save your time.</description><link>https://nixzhu.dev/posts/introducing-ducky</link><pubDate>Thu, 19 Nov 2020 09:41:00 +0800</pubDate><content:encoded><![CDATA[<h1>Introducing Ducky</h1><h2>Overview</h2><p>Ducky is a document-based app that helps you infer models from <strong>JSON</strong> to save your time.</p><ul><li>It can infer <strong>JSON Schema,</strong> <strong>Swift</strong>, <strong>Kotlin</strong>, <strong>Dart(Null Safe)</strong>, <strong>Go</strong> or <strong>Proto</strong> models.</li><li>It provides many options for you to customize the model.</li></ul><p>In short, it's a model type generator for JSON.</p><p>Ducky is build with <strong>SwiftUI</strong>, runs on iOS/iPadOS 14 or macOS 11 Big Sur.</p><img src="https://nixzhu.dev/images/introducing-ducky/overview.jpg" alt="Overview"/><p>If you work with RESTful APIs, Ducky should save you a lot of time building the model layer.</p><p>Get it on the <a href="https://apps.apple.com/us/app/ducky-model-editor/id1525505933">App Store</a>. If the link doesn't work, try searching for <strong>ducky model editor</strong> in the App Store.</p><h2>Examples</h2><p>There is a JSON that represents a post as follow.</p><pre><code><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Test&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;created_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2020-11-18T18:25:43.511Z&quot;</span>
<span class="hljs-punctuation">}</span></code></pre><p>If you choose <strong>Swift</strong> as <strong>Output Type</strong>, set <strong>Model Name</strong> to <strong>Post</strong>, Ducky will infer it as follow.</p><pre><code><span class="hljs-keyword">import</span> Foundation

<span class="hljs-keyword">struct</span> <span class="hljs-title class_">Post</span>: <span class="hljs-title class_">Codable</span> {
  <span class="hljs-keyword">let</span> id: <span class="hljs-type">Int</span>
  <span class="hljs-keyword">let</span> title: <span class="hljs-type">String</span>
  <span class="hljs-keyword">let</span> createdAt: <span class="hljs-type">Date</span>

  <span class="hljs-keyword">private</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">CodingKeys</span>: <span class="hljs-title class_">String</span>, <span class="hljs-title class_">CodingKey</span> {
    <span class="hljs-keyword">case</span> id
    <span class="hljs-keyword">case</span> title
    <span class="hljs-keyword">case</span> createdAt <span class="hljs-operator">=</span> <span class="hljs-string">&quot;created_at&quot;</span>
  }
}</code></pre><p>Note that, by default, the <strong>id</strong> is inferred as <strong>Int</strong>, the <strong>title</strong> is inferred as <strong>String</strong>, the <strong>created_at</strong> is inferred as <strong>Date</strong>. Also note that <strong>created_at</strong> is mapped to <strong>createdAt</strong>.</p><p>If you want to change the property's type, for example, infer id as UInt64, you can do that by <strong>Type Name Maps</strong>. Just add a rule: <strong>id</strong> for the Path, <strong>UInt64</strong> for the Name. Ducky will infer it as follow.</p><pre><code><span class="hljs-keyword">import</span> Foundation

<span class="hljs-keyword">struct</span> <span class="hljs-title class_">Post</span>: <span class="hljs-title class_">Codable</span> {
  <span class="hljs-keyword">let</span> id: <span class="hljs-type">UInt64</span>
  <span class="hljs-keyword">let</span> title: <span class="hljs-type">String</span>
  <span class="hljs-keyword">let</span> createdAt: <span class="hljs-type">Date</span>

  <span class="hljs-keyword">private</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">CodingKeys</span>: <span class="hljs-title class_">String</span>, <span class="hljs-title class_">CodingKey</span> {
    <span class="hljs-keyword">case</span> id
    <span class="hljs-keyword">case</span> title
    <span class="hljs-keyword">case</span> createdAt <span class="hljs-operator">=</span> <span class="hljs-string">&quot;created_at&quot;</span>
  }
}</code></pre><p>If you check <strong>Needs Initializer</strong>, Ducky will infer it as follow.</p><pre><code><span class="hljs-keyword">import</span> Foundation

<span class="hljs-keyword">struct</span> <span class="hljs-title class_">Post</span>: <span class="hljs-title class_">Codable</span> {
  <span class="hljs-keyword">let</span> id: <span class="hljs-type">UInt64</span>
  <span class="hljs-keyword">let</span> title: <span class="hljs-type">String</span>
  <span class="hljs-keyword">let</span> createdAt: <span class="hljs-type">Date</span>

  <span class="hljs-keyword">private</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">CodingKeys</span>: <span class="hljs-title class_">String</span>, <span class="hljs-title class_">CodingKey</span> {
    <span class="hljs-keyword">case</span> id
    <span class="hljs-keyword">case</span> title
    <span class="hljs-keyword">case</span> createdAt <span class="hljs-operator">=</span> <span class="hljs-string">&quot;created_at&quot;</span>
  }

  <span class="hljs-keyword">init</span>(<span class="hljs-params">id</span>: <span class="hljs-type">UInt64</span>, <span class="hljs-params">title</span>: <span class="hljs-type">String</span>, <span class="hljs-params">createdAt</span>: <span class="hljs-type">Date</span>) {
    <span class="hljs-keyword">self</span>.id <span class="hljs-operator">=</span> id
    <span class="hljs-keyword">self</span>.title <span class="hljs-operator">=</span> title
    <span class="hljs-keyword">self</span>.createdAt <span class="hljs-operator">=</span> createdAt
  }
}</code></pre><h3>How about nested JSON?</h3><p>We give the post a creator as follow.</p><pre><code><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Test&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;created_at&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2020-11-18T18:25:43.511Z&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;creator&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">42</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nixzhu&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;avatar_url&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;https://avatar.com/nixzhu.png&quot;</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span></code></pre><p>And we add another <strong>Type Name Maps</strong> rule: <strong>creator</strong> for the Path, <strong>User</strong> for the Name. Ducky will infer it as follow.</p><pre><code><span class="hljs-keyword">import</span> Foundation

<span class="hljs-keyword">struct</span> <span class="hljs-title class_">Post</span>: <span class="hljs-title class_">Codable</span> {
  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">User</span>: <span class="hljs-title class_">Codable</span> {
    <span class="hljs-keyword">let</span> id: <span class="hljs-type">UInt64</span>
    <span class="hljs-keyword">let</span> name: <span class="hljs-type">String</span>
    <span class="hljs-keyword">let</span> avatarURL: <span class="hljs-type">URL</span>

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">CodingKeys</span>: <span class="hljs-title class_">String</span>, <span class="hljs-title class_">CodingKey</span> {
      <span class="hljs-keyword">case</span> id
      <span class="hljs-keyword">case</span> name
      <span class="hljs-keyword">case</span> avatarURL <span class="hljs-operator">=</span> <span class="hljs-string">&quot;avatar_url&quot;</span>
    }

    <span class="hljs-keyword">init</span>(<span class="hljs-params">id</span>: <span class="hljs-type">UInt64</span>, <span class="hljs-params">name</span>: <span class="hljs-type">String</span>, <span class="hljs-params">avatarURL</span>: <span class="hljs-type">URL</span>) {
      <span class="hljs-keyword">self</span>.id <span class="hljs-operator">=</span> id
      <span class="hljs-keyword">self</span>.name <span class="hljs-operator">=</span> name
      <span class="hljs-keyword">self</span>.avatarURL <span class="hljs-operator">=</span> avatarURL
    }
  }

  <span class="hljs-keyword">let</span> id: <span class="hljs-type">UInt64</span>
  <span class="hljs-keyword">let</span> title: <span class="hljs-type">String</span>
  <span class="hljs-keyword">let</span> createdAt: <span class="hljs-type">Date</span>
  <span class="hljs-keyword">let</span> creator: <span class="hljs-type">User</span>

  <span class="hljs-keyword">private</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">CodingKeys</span>: <span class="hljs-title class_">String</span>, <span class="hljs-title class_">CodingKey</span> {
    <span class="hljs-keyword">case</span> id
    <span class="hljs-keyword">case</span> title
    <span class="hljs-keyword">case</span> createdAt <span class="hljs-operator">=</span> <span class="hljs-string">&quot;created_at&quot;</span>
    <span class="hljs-keyword">case</span> creator
  }

  <span class="hljs-keyword">init</span>(<span class="hljs-params">id</span>: <span class="hljs-type">UInt64</span>, <span class="hljs-params">title</span>: <span class="hljs-type">String</span>, <span class="hljs-params">createdAt</span>: <span class="hljs-type">Date</span>, <span class="hljs-params">creator</span>: <span class="hljs-type">User</span>) {
    <span class="hljs-keyword">self</span>.id <span class="hljs-operator">=</span> id
    <span class="hljs-keyword">self</span>.title <span class="hljs-operator">=</span> title
    <span class="hljs-keyword">self</span>.createdAt <span class="hljs-operator">=</span> createdAt
    <span class="hljs-keyword">self</span>.creator <span class="hljs-operator">=</span> creator
  }
}</code></pre><p>Note that we have a nested <strong>User</strong> inside the <strong>Post</strong>. Also Note that the <strong>avatar_url</strong> is inferred as <strong>URL</strong>, and is mapped to <strong>avatarURL</strong>.</p><p>If you don't like the <strong>Nested</strong> structure. You can change the <strong>Structure Style</strong> to <strong>Extended</strong> or <strong>Flat</strong>.</p><p>If you choose <strong>Extended</strong>, Ducky will infer it as follow.</p><pre><code><span class="hljs-keyword">import</span> Foundation

<span class="hljs-keyword">struct</span> <span class="hljs-title class_">Post</span>: <span class="hljs-title class_">Codable</span> {
  <span class="hljs-keyword">let</span> id: <span class="hljs-type">UInt64</span>
  <span class="hljs-keyword">let</span> title: <span class="hljs-type">String</span>
  <span class="hljs-keyword">let</span> createdAt: <span class="hljs-type">Date</span>
  <span class="hljs-keyword">let</span> creator: <span class="hljs-type">User</span>

  <span class="hljs-keyword">private</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">CodingKeys</span>: <span class="hljs-title class_">String</span>, <span class="hljs-title class_">CodingKey</span> {
    <span class="hljs-keyword">case</span> id
    <span class="hljs-keyword">case</span> title
    <span class="hljs-keyword">case</span> createdAt <span class="hljs-operator">=</span> <span class="hljs-string">&quot;created_at&quot;</span>
    <span class="hljs-keyword">case</span> creator
  }

  <span class="hljs-keyword">init</span>(<span class="hljs-params">id</span>: <span class="hljs-type">UInt64</span>, <span class="hljs-params">title</span>: <span class="hljs-type">String</span>, <span class="hljs-params">createdAt</span>: <span class="hljs-type">Date</span>, <span class="hljs-params">creator</span>: <span class="hljs-type">User</span>) {
    <span class="hljs-keyword">self</span>.id <span class="hljs-operator">=</span> id
    <span class="hljs-keyword">self</span>.title <span class="hljs-operator">=</span> title
    <span class="hljs-keyword">self</span>.createdAt <span class="hljs-operator">=</span> createdAt
    <span class="hljs-keyword">self</span>.creator <span class="hljs-operator">=</span> creator
  }
}

<span class="hljs-keyword">extension</span> <span class="hljs-title class_">Post</span> {
  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">User</span>: <span class="hljs-title class_">Codable</span> {
    <span class="hljs-keyword">let</span> id: <span class="hljs-type">UInt64</span>
    <span class="hljs-keyword">let</span> name: <span class="hljs-type">String</span>
    <span class="hljs-keyword">let</span> avatarURL: <span class="hljs-type">URL</span>

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">CodingKeys</span>: <span class="hljs-title class_">String</span>, <span class="hljs-title class_">CodingKey</span> {
      <span class="hljs-keyword">case</span> id
      <span class="hljs-keyword">case</span> name
      <span class="hljs-keyword">case</span> avatarURL <span class="hljs-operator">=</span> <span class="hljs-string">&quot;avatar_url&quot;</span>
    }

    <span class="hljs-keyword">init</span>(<span class="hljs-params">id</span>: <span class="hljs-type">UInt64</span>, <span class="hljs-params">name</span>: <span class="hljs-type">String</span>, <span class="hljs-params">avatarURL</span>: <span class="hljs-type">URL</span>) {
      <span class="hljs-keyword">self</span>.id <span class="hljs-operator">=</span> id
      <span class="hljs-keyword">self</span>.name <span class="hljs-operator">=</span> name
      <span class="hljs-keyword">self</span>.avatarURL <span class="hljs-operator">=</span> avatarURL
    }
  }
}</code></pre><p>If you choose <strong>Flat</strong>, Ducky will infer it as follow.</p><pre><code><span class="hljs-keyword">import</span> Foundation

<span class="hljs-keyword">struct</span> <span class="hljs-title class_">Post</span>: <span class="hljs-title class_">Codable</span> {
  <span class="hljs-keyword">let</span> id: <span class="hljs-type">UInt64</span>
  <span class="hljs-keyword">let</span> title: <span class="hljs-type">String</span>
  <span class="hljs-keyword">let</span> createdAt: <span class="hljs-type">Date</span>
  <span class="hljs-keyword">let</span> creator: <span class="hljs-type">User</span>

  <span class="hljs-keyword">private</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">CodingKeys</span>: <span class="hljs-title class_">String</span>, <span class="hljs-title class_">CodingKey</span> {
    <span class="hljs-keyword">case</span> id
    <span class="hljs-keyword">case</span> title
    <span class="hljs-keyword">case</span> createdAt <span class="hljs-operator">=</span> <span class="hljs-string">&quot;created_at&quot;</span>
    <span class="hljs-keyword">case</span> creator
  }

  <span class="hljs-keyword">init</span>(<span class="hljs-params">id</span>: <span class="hljs-type">UInt64</span>, <span class="hljs-params">title</span>: <span class="hljs-type">String</span>, <span class="hljs-params">createdAt</span>: <span class="hljs-type">Date</span>, <span class="hljs-params">creator</span>: <span class="hljs-type">User</span>) {
    <span class="hljs-keyword">self</span>.id <span class="hljs-operator">=</span> id
    <span class="hljs-keyword">self</span>.title <span class="hljs-operator">=</span> title
    <span class="hljs-keyword">self</span>.createdAt <span class="hljs-operator">=</span> createdAt
    <span class="hljs-keyword">self</span>.creator <span class="hljs-operator">=</span> creator
  }
}

<span class="hljs-keyword">struct</span> <span class="hljs-title class_">User</span>: <span class="hljs-title class_">Codable</span> {
  <span class="hljs-keyword">let</span> id: <span class="hljs-type">UInt64</span>
  <span class="hljs-keyword">let</span> name: <span class="hljs-type">String</span>
  <span class="hljs-keyword">let</span> avatarURL: <span class="hljs-type">URL</span>

  <span class="hljs-keyword">private</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">CodingKeys</span>: <span class="hljs-title class_">String</span>, <span class="hljs-title class_">CodingKey</span> {
    <span class="hljs-keyword">case</span> id
    <span class="hljs-keyword">case</span> name
    <span class="hljs-keyword">case</span> avatarURL <span class="hljs-operator">=</span> <span class="hljs-string">&quot;avatar_url&quot;</span>
  }

  <span class="hljs-keyword">init</span>(<span class="hljs-params">id</span>: <span class="hljs-type">UInt64</span>, <span class="hljs-params">name</span>: <span class="hljs-type">String</span>, <span class="hljs-params">avatarURL</span>: <span class="hljs-type">URL</span>) {
    <span class="hljs-keyword">self</span>.id <span class="hljs-operator">=</span> id
    <span class="hljs-keyword">self</span>.name <span class="hljs-operator">=</span> name
    <span class="hljs-keyword">self</span>.avatarURL <span class="hljs-operator">=</span> avatarURL
  }
}</code></pre><h3>How about array in JSON?</h3><p>There is a JSON that represents a library's books as follow.</p><pre><code><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;books&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">&quot;language&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C&quot;</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Dennis Ritchie&quot;</span>
    <span class="hljs-punctuation">}</span><span class="hljs-punctuation">,</span>
    <span class="hljs-punctuation">{</span>
      <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">&quot;language&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C++&quot;</span><span class="hljs-punctuation">,</span>
      <span class="hljs-attr">&quot;author&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot; Bjarne Stroustrup&quot;</span>
    <span class="hljs-punctuation">}</span>
  <span class="hljs-punctuation">]</span>
<span class="hljs-punctuation">}</span></code></pre><p>If we set <strong>Model Name</strong> to <strong>Library</strong>. Add a <strong>Type Name Maps</strong> rule: <strong>books</strong> for the Path, <strong>Book</strong> for the Name. And add a <strong>Property Enum Maps</strong> rule: <strong>language</strong> for the Path, and three cases: <strong>c|C</strong>, <strong>cpp|C++</strong>, <strong>swift|Swift</strong>. Ducky will infer it as follow.</p><pre><code><span class="hljs-keyword">import</span> Foundation

<span class="hljs-keyword">struct</span> <span class="hljs-title class_">Library</span>: <span class="hljs-title class_">Codable</span> {
  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Book</span>: <span class="hljs-title class_">Codable</span> {
    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Language</span>: <span class="hljs-title class_">String</span>, <span class="hljs-title class_">Codable</span> {
      <span class="hljs-keyword">case</span> c <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C&quot;</span>
      <span class="hljs-keyword">case</span> cpp <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C++&quot;</span>
      <span class="hljs-keyword">case</span> swift <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Swift&quot;</span>
    }

    <span class="hljs-keyword">let</span> id: <span class="hljs-type">Int</span>
    <span class="hljs-keyword">let</span> language: <span class="hljs-type">Language</span>
    <span class="hljs-keyword">let</span> author: <span class="hljs-type">String</span>
  }

  <span class="hljs-keyword">let</span> books: [<span class="hljs-type">Book</span>]
}</code></pre><p>If you check <strong>All Properties Optional</strong>, Ducky will infer it as follow.</p><pre><code><span class="hljs-keyword">import</span> Foundation

<span class="hljs-keyword">struct</span> <span class="hljs-title class_">Library</span>: <span class="hljs-title class_">Codable</span> {
  <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Book</span>: <span class="hljs-title class_">Codable</span> {
    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Language</span>: <span class="hljs-title class_">String</span>, <span class="hljs-title class_">Codable</span> {
      <span class="hljs-keyword">case</span> c <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C&quot;</span>
      <span class="hljs-keyword">case</span> cpp <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C++&quot;</span>
      <span class="hljs-keyword">case</span> swift <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Swift&quot;</span>
    }

    <span class="hljs-keyword">let</span> id: <span class="hljs-type">Int</span>?
    <span class="hljs-keyword">let</span> language: <span class="hljs-type">Language</span>?
    <span class="hljs-keyword">let</span> author: <span class="hljs-type">String</span>?
  }

  <span class="hljs-keyword">let</span> books: [<span class="hljs-type">Book</span>]<span class="hljs-operator">?</span>
}</code></pre><p>There are other options, just try it.</p><h3>How about Kotlin, Dart and Go models?</h3><p>Give a JSON as follow.</p><pre><code><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;id&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;title&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Hello World&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;body&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;I&#x27;m Ducky, help you infer models from JSON.&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;outputTypes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span>
    <span class="hljs-string">&quot;Swift&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">&quot;Kotlin&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">&quot;Dart&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-string">&quot;Go&quot;</span>
  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;developer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">{</span>
    <span class="hljs-attr">&quot;username&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nixzhu&quot;</span><span class="hljs-punctuation">,</span>
    <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;zhuhongxu@gmail.com&quot;</span>
  <span class="hljs-punctuation">}</span>
<span class="hljs-punctuation">}</span></code></pre><p>If you choose <strong>Kotlin</strong> as <strong>Output Type</strong>, set <strong>Model Name</strong> to <strong>Hello</strong>, Ducky will infer it as follow.</p><pre><code><span class="hljs-keyword">package</span> ducky

<span class="hljs-keyword">import</span> kotlinx.serialization.*
<span class="hljs-keyword">import</span> kotlinx.serialization.json.*
<span class="hljs-keyword">import</span> kotlinx.serialization.<span class="hljs-keyword">internal</span>.*

<span class="hljs-meta">@Serializable</span>
<span class="hljs-keyword">data</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>(
  <span class="hljs-keyword">val</span> id: <span class="hljs-built_in">Long</span>,
  <span class="hljs-keyword">val</span> title: String,
  <span class="hljs-keyword">val</span> body: String,
  <span class="hljs-keyword">val</span> outputTypes: List&lt;String&gt;,
  <span class="hljs-keyword">val</span> developer: Developer
) {
  <span class="hljs-meta">@Serializable</span>
  <span class="hljs-keyword">data</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Developer</span> </span>(
    <span class="hljs-keyword">val</span> username: String,
    <span class="hljs-keyword">val</span> email: String
  )
}</code></pre><p>If you change the <strong>Structure Style</strong> to <strong>Flat</strong>, Ducky will infer it as follow.</p><pre><code><span class="hljs-keyword">package</span> ducky

<span class="hljs-keyword">import</span> kotlinx.serialization.*
<span class="hljs-keyword">import</span> kotlinx.serialization.json.*
<span class="hljs-keyword">import</span> kotlinx.serialization.<span class="hljs-keyword">internal</span>.*

<span class="hljs-meta">@Serializable</span>
<span class="hljs-keyword">data</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>(
  <span class="hljs-keyword">val</span> id: <span class="hljs-built_in">Long</span>,
  <span class="hljs-keyword">val</span> title: String,
  <span class="hljs-keyword">val</span> body: String,
  <span class="hljs-keyword">val</span> outputTypes: List&lt;String&gt;,
  <span class="hljs-keyword">val</span> developer: Developer
)

<span class="hljs-meta">@Serializable</span>
<span class="hljs-keyword">data</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Developer</span> </span>(
  <span class="hljs-keyword">val</span> username: String,
  <span class="hljs-keyword">val</span> email: String
)</code></pre><p>If you choose <strong>Dart</strong> as <strong>Output Type</strong>, Ducky will infer it as follow.</p><pre><code><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;package:meta/meta.dart&#x27;</span>;
<span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;dart:convert&#x27;</span>;

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hello</span> </span>{
  <span class="hljs-built_in">int</span> id;
  <span class="hljs-built_in">String</span> title;
  <span class="hljs-built_in">String</span> body;
  <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">String</span>&gt; outputTypes;
  Developer developer;

  Hello({
    <span class="hljs-keyword">this</span>.id,
    <span class="hljs-keyword">this</span>.title,
    <span class="hljs-keyword">this</span>.body,
    <span class="hljs-keyword">this</span>.outputTypes,
    <span class="hljs-keyword">this</span>.developer,
  });

  <span class="hljs-keyword">factory</span> Hello.fromJSON(<span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">dynamic</span>&gt; json) =&gt; Hello(
    id: json[<span class="hljs-string">&quot;id&quot;</span>],
    title: json[<span class="hljs-string">&quot;title&quot;</span>],
    body: json[<span class="hljs-string">&quot;body&quot;</span>],
    outputTypes: <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">String</span>&gt;.from(json[<span class="hljs-string">&quot;outputTypes&quot;</span>].map((x) =&gt; x)),
    developer: Developer.fromJSON(json[<span class="hljs-string">&quot;developer&quot;</span>]),
  );

  <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">dynamic</span>&gt; toJSON() =&gt; {
    <span class="hljs-string">&quot;id&quot;</span>: id,
    <span class="hljs-string">&quot;title&quot;</span>: title,
    <span class="hljs-string">&quot;body&quot;</span>: body,
    <span class="hljs-string">&quot;outputTypes&quot;</span>: <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">dynamic</span>&gt;.from(outputTypes.map((x) =&gt; x)),
    <span class="hljs-string">&quot;developer&quot;</span>: developer.toJSON(),
  };
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Developer</span> </span>{
  <span class="hljs-built_in">String</span> username;
  <span class="hljs-built_in">String</span> email;

  Developer({
    <span class="hljs-keyword">this</span>.username,
    <span class="hljs-keyword">this</span>.email,
  });

  <span class="hljs-keyword">factory</span> Developer.fromJSON(<span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">dynamic</span>&gt; json) =&gt; Developer(
    username: json[<span class="hljs-string">&quot;username&quot;</span>],
    email: json[<span class="hljs-string">&quot;email&quot;</span>],
  );

  <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">String</span>, <span class="hljs-built_in">dynamic</span>&gt; toJSON() =&gt; {
    <span class="hljs-string">&quot;username&quot;</span>: username,
    <span class="hljs-string">&quot;email&quot;</span>: email,
  };
}</code></pre><p>If you choose <strong>Go</strong> as <strong>Output Type</strong>, Ducky will infer it as follow.</p><pre><code><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">type</span> Hello <span class="hljs-keyword">struct</span> {
  ID <span class="hljs-type">int</span> <span class="hljs-string">`json:&quot;id&quot;`</span>
  Title <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;title&quot;`</span>
  Body <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;body&quot;`</span>
  OutputTypes []<span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;outputTypes&quot;`</span>
  Developer <span class="hljs-keyword">struct</span> {
    Username <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;username&quot;`</span>
    Email <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;email&quot;`</span>
  } <span class="hljs-string">`json:&quot;developer&quot;`</span>
}</code></pre><p>If you change the <strong>Structure Style</strong> to <strong>Flat</strong>, Ducky will infer it as follow.</p><pre><code><span class="hljs-keyword">package</span> main

<span class="hljs-keyword">type</span> Hello <span class="hljs-keyword">struct</span> {
  ID <span class="hljs-type">int</span> <span class="hljs-string">`json:&quot;id&quot;`</span>
  Title <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;title&quot;`</span>
  Body <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;body&quot;`</span>
  OutputTypes []<span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;outputTypes&quot;`</span>
  Developer Developer <span class="hljs-string">`json:&quot;developer&quot;`</span>
}

<span class="hljs-keyword">type</span> Developer <span class="hljs-keyword">struct</span> {
  Username <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;username&quot;`</span>
  Email <span class="hljs-type">string</span> <span class="hljs-string">`json:&quot;email&quot;`</span>
}</code></pre><p>Also, there are other options, just try it.</p><h2>Finally</h2><p>Get it on the <a href="https://apps.apple.com/us/app/ducky-model-editor/id1525505933">App Store</a>. If the link doesn't work, try searching for <strong>ducky model editor</strong> in the App Store.</p><p>If you have any questions or suggestions, please to contact me via <a href="mailto:zhuhongxu@gmail.com">Email</a>.</p><p>Hope you like this Ducky. :]</p>]]></content:encoded></item></channel></rss>